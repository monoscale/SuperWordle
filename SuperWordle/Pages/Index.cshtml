@page
@using SuperWordle.Models

@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div>
    @for (int i = 0; i < 6; i++) {
        @for (int j = 0; j < WordleWord.WORD_LENGTH; j++) {
            <input id="@i-@j" readonly type="text" maxlength="1" max="1" />
        }
        <br />
    }
</div>



<script>
    var currentRow = 0;
    var currentColumn = 0
    
    var bulkAllowedKeys = 'abcdefghijklmnopqrstuvwxyz';
    var allowedKeys = bulkAllowedKeys.split('');
    
    var allowedWords = ['ADIEU', 'SLATE', 'PINES'] //TODO: retrieve allowed words from server
    
    var word = 'SLATE'; //TODO: retrieve word from server

    document.addEventListener('keydown', processKeydown);
    document.addEventListener('keyup', processKeyup);

    function processKeydown(e) {
        console.log(e);
        if (e.code === 'Backspace') {
            if (currentColumn > 0) {
                currentColumn = currentColumn - 1;
            }
            setInputValue(currentRow, currentColumn, '');
        } else if(e.code === 'Enter'){
            if (currentColumn === @WordleWord.WORD_LENGTH) {
                evaluateWord(currentRow);
            }
        }
    }

    function processKeyup(e) {
        if (allowedKeys.includes(e.key)) {
            if (currentColumn < @WordleWord.WORD_LENGTH) {
                setInputValue(currentRow, currentColumn, e.key);
                currentColumn = currentColumn + 1;
            }
        }
    }

    function getInput(row, column) {
        return document.getElementById("" + row + "-" + column);
    }

    function focusInput(row, column) {
        getInput(row, column).focus();
    }

    function setInputValue(row, column, value) {
        getInput(row, column).value = value.toUpperCase();
    }

    function getInputValue(row, column) {
        return getInput(row, column).value;
    }

    function getWord(row) {
        var word = '';
        for (var i = 0; i < @WordleWord.WORD_LENGTH; i++) {
            word += getInputValue(row, i);
        }
        return word;
    }

    function evaluateWord(row) {
        var word = getWord(row);
        if (isWord(word)) {
            currentRow++;
            currentColumn = 0;
        } else {
            alert('Not a word');
        }
    }

    function isWord(word){
        return allowedWords.includes(word);
    }
</script>